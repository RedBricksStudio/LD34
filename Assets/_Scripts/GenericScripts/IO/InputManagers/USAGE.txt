This is the instructions manual for the input manager files.
These files implement the observer pattern, almost out-of-the-box

COMPONENTS:

E_InputTypes: 
	- Enum containing the possible keys pressed
	- The values here must represent EXACTLY the names of the 
	keys from the Unity settings file. It is case sensitive.
	
I_InputReceiver (Observer):
	- The interface that all classes that care about inputs must
	implement. It contains:
		- Methods to notify the implementor when it's been attached 
		to the sender.
		- Methods to notify the implemento whenever a key is pressed. 
		In these methods, an E_InputTypes value is passed.
	- EACH IMPLEMENTOR CLASS MUST DECIDE WHETHER OR NOT TO RESPOND
	TO EACH INPUT.
	
I_InputSender (Observable):
	- The interface of all classes that receive input.
	- Contains a list of I_InputReceiver, and notifies them whenever
	a new input is read.

PlayerInputManager (MonoBehavior Script)(Implements I_InputSender):
	- Basic implementation of I_InputSender.
	- Ready to attach to any GameObject.	
	- IT CAN READ ANY KEY FROM E_InputTypes

INSTRUCTIONS:

To use in a scene:

1.- Create an empty GameObject, rename it, and attach the PlayerInputManager to it.
2.- Implement I_InputReceiver as desired in another Unity MonoBehavior Script.
	2.1.- The implementation must have a "public GameObject inputSender" field.
	2.2.- Attach itself to the InputSender in Start() with: 
				"inputSender.GetComponent<I_InputSender>().addInputReceiver(this);"
3.- Attach the new script to the desired GameObject.
4.- Select the Input Manager object and assign it to the public field of the new Script.

To modify inputs:

1.- Add or remove the desired inputs in "Edit->Project Settings->Input"
2.- Add or remove the same items in E_InputTypes

NOTE: HOW TO MAKE IT INTERACT WITH I_Interactable

	private List<I_Interactable> interactables;

	public void onButtonPressed (E_InputTypes type)
	{
		if (type.Equals(E_InputTypes.Interact)) {
			foreach (I_Interactable interactable in interactables) {
				if (interactable.isInteractable()) {
					interactable.onInteract(gameObject);
				}
			}
		}
	}	

	//Keep the list of objects we can interact with
	public void OnTriggerEnter2D(Collider2D col) {
		I_Interactable interactable = col.GetComponent<I_Interactable>();
		if (interactable != null) {
			interactables.Add(interactable);			
		}
	}

	public void OnTriggerExit2D(Collider2D col) {
		I_Interactable interactable = col.GetComponent<I_Interactable>();
		if (interactable != null) {
			interactables.Remove(interactable);
		}		
	}
